{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://ViewCounter/webpack/universalModuleDefinition","webpack://ViewCounter/webpack/bootstrap","webpack://ViewCounter/webpack/runtime/define property getters","webpack://ViewCounter/webpack/runtime/global","webpack://ViewCounter/webpack/runtime/hasOwnProperty shorthand","webpack://ViewCounter/./node_modules/@firebase/util/dist/index.esm2017.js","webpack://ViewCounter/./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack://ViewCounter/./node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack://ViewCounter/./node_modules/idb/build/wrap-idb-value.js","webpack://ViewCounter/./node_modules/idb/build/index.js","webpack://ViewCounter/./node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack://ViewCounter/./node_modules/firebase/app/dist/esm/index.esm.js","webpack://ViewCounter/./node_modules/@firebase/database/dist/index.esm2017.js","webpack://ViewCounter/./src/modules/Utils.ts","webpack://ViewCounter/./src/modules/CounterElement.ts","webpack://ViewCounter/./src/modules/ViewCounter.ts","webpack://ViewCounter/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ViewCounter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ViewCounter\"] = factory();\n\telse\n\t\troot[\"ViewCounter\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw new DecodeBase64StringError();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * An error encountered while decoding base64 string.\r\n */\r\nclass DecodeBase64StringError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = 'DecodeBase64StringError';\r\n    }\r\n}\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n * @public\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;\r\n/**\r\n * Attempt to read defaults from a JSON string provided to\r\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\r\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\r\n * The dots are in parens because certain compilers (Vite?) cannot\r\n * handle seeing that variable in comments.\r\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\r\n */\r\nconst getDefaultsFromEnvVariable = () => {\r\n    if (typeof process === 'undefined' || typeof process.env === 'undefined') {\r\n        return;\r\n    }\r\n    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\r\n    if (defaultsJsonString) {\r\n        return JSON.parse(defaultsJsonString);\r\n    }\r\n};\r\nconst getDefaultsFromCookie = () => {\r\n    if (typeof document === 'undefined') {\r\n        return;\r\n    }\r\n    let match;\r\n    try {\r\n        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\r\n    }\r\n    catch (e) {\r\n        // Some environments such as Angular Universal SSR have a\r\n        // `document` object but error on accessing `document.cookie`.\r\n        return;\r\n    }\r\n    const decoded = match && base64Decode(match[1]);\r\n    return decoded && JSON.parse(decoded);\r\n};\r\n/**\r\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\r\n * (1) if such an object exists as a property of `globalThis`\r\n * (2) if such an object was provided on a shell environment variable\r\n * (3) if such an object exists in a cookie\r\n * @public\r\n */\r\nconst getDefaults = () => {\r\n    try {\r\n        return (getDefaultsFromGlobal() ||\r\n            getDefaultsFromEnvVariable() ||\r\n            getDefaultsFromCookie());\r\n    }\r\n    catch (e) {\r\n        /**\r\n         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\r\n         * to any environment case we have not accounted for. Log to\r\n         * info instead of swallowing so we can find these unknown cases\r\n         * and add paths for them if needed.\r\n         */\r\n        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\r\n        return;\r\n    }\r\n};\r\n/**\r\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };\r\n/**\r\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHostnameAndPort = (productName) => {\r\n    const host = getDefaultEmulatorHost(productName);\r\n    if (!host) {\r\n        return undefined;\r\n    }\r\n    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\r\n    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\r\n        throw new Error(`Invalid host ${host} with no separate hostname and port!`);\r\n    }\r\n    // eslint-disable-next-line no-restricted-globals\r\n    const port = parseInt(host.substring(separatorIndex + 1), 10);\r\n    if (host[0] === '[') {\r\n        // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\r\n        return [host.substring(1, separatorIndex - 1), port];\r\n    }\r\n    else {\r\n        return [host.substring(0, separatorIndex), port];\r\n    }\r\n};\r\n/**\r\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\r\n * @public\r\n */\r\nconst getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };\r\n/**\r\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\r\n * prefixed by \"_\")\r\n * @public\r\n */\r\nconst getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`]; };\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected or specified.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    var _a;\r\n    const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;\r\n    if (forceEnvironment === 'node') {\r\n        return true;\r\n    }\r\n    else if (forceEnvironment === 'browser') {\r\n        return false;\r\n    }\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    try {\r\n        return typeof indexedDB === 'object';\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\r\n * @internal\r\n */\r\nfunction promiseWithTimeout(promise, timeInMS = 2000) {\r\n    const deferredPromise = new Deferred();\r\n    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\r\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\r\n    return deferredPromise.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n * Generates a new uuid.\r\n * @public\r\n */\r\nconst uuidv4 = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, DecodeBase64StringError, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getDefaultAppConfig, getDefaultEmulatorHost, getDefaultEmulatorHostnameAndPort, getDefaults, getExperimentalSetting, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, promiseWithTimeout, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, uuidv4, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, getDefaultAppConfig, deepEqual, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* ComponentType.VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.9.7\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.19.1\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* AppError.NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* AppError.BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* AppError.DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* AppError.APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"no-options\" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',\r\n    [\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"idb-open\" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-get\" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-set\" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-delete\" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* AppError.APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(_options, rawConfig = {}) {\r\n    let options = _options;\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* AppError.BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    options || (options = getDefaultAppConfig());\r\n    if (!options) {\r\n        throw ERROR_FACTORY.create(\"no-options\" /* AppError.NO_OPTIONS */);\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* AppError.DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app && name === DEFAULT_ENTRY_NAME) {\r\n        return initializeApp();\r\n    }\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* ComponentType.VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME);\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"idb-open\" /* AppError.IDB_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* AppError.IDB_GET */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.done;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* AppError.IDB_WRITE */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.19.1\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.14.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\r\n    if (typeof timeout === 'number' &&\r\n        // @ts-ignore Is only defined in Deno environments.\r\n        typeof Deno !== 'undefined' &&\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno['unrefTimer']) {\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno.unrefTimer(timeout);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    }\r\n    else if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this.isUsingEmulator = isUsingEmulator;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\r\n            this.myIFrame.doc.body.textContent = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* RealtimeState.CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                const handshakePayload = Object.assign({}, payload);\r\n                if (this.repoInfo_.isUsingEmulator) {\r\n                    // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\r\n                    handshakePayload.h = this.repoInfo_.host;\r\n                }\r\n                this.onHandshake_(handshakePayload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* RealtimeState.CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* RealtimeState.DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* ChangeType.VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        const isWithinStart = this.startIsInclusive_\r\n            ? this.index_.compare(this.getStartPost(), node) <= 0\r\n            : this.index_.compare(this.getStartPost(), node) < 0;\r\n        const isWithinEnd = this.endIsInclusive_\r\n            ? this.index_.compare(node, this.getEndPost()) <= 0\r\n            : this.index_.compare(node, this.getEndPost()) < 0;\r\n        return isWithinStart && isWithinEnd;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\r\n        this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\r\n        this.withinStartPost = (node) => {\r\n            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\r\n            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.withinEndPost = (node) => {\r\n            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\r\n            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    if (!this.withinDirectionalStart(next)) {\r\n                        // if we have not reached the start, skip to the next element\r\n                        continue;\r\n                    }\r\n                    else if (!this.withinDirectionalEnd(next)) {\r\n                        // if we have reached the end, stop adding elements\r\n                        break;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    const inRange = count < this.limit_ &&\r\n                        this.withinDirectionalStart(next) &&\r\n                        this.withinDirectionalEnd(next);\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false; // can only be true if startSet_ is true\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false; // can only be true if endSet_ is true\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.startAfterSet_ = this.startAfterSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.endBeforeSet_ = this.endBeforeSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        const startParam = queryParams.startAfterSet_\r\n            ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */\r\n            : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\r\n        qs[startParam] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[startParam] += ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        const endParam = queryParams.endBeforeSet_\r\n            ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */\r\n            : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\r\n        qs[endParam] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[endParam] += ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n        obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =\r\n            !queryParams.startAfterSet_;\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n        obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =\r\n            !queryParams.endBeforeSet_;\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === null;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        if (!skipListenerDedup) {\r\n            /**\r\n             * We may have just removed one of many listeners and can short-circuit this whole process\r\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n             * properly set up.\r\n             */\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            const removingDefault = -1 !==\r\n                removed.findIndex(query => {\r\n                    return query._queryParams.loadsAllData();\r\n                });\r\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n            if (removingDefault && !covered) {\r\n                const subtree = syncTree.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (let i = 0; i < newViews.length; ++i) {\r\n                        const view = newViews[i], newQuery = view.query;\r\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                // Otherwise there's nothing below us, so nothing we need to start listening on\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    const defaultTag = null;\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach((queryToRemove) => {\r\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query, eventRegistration) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        /**\r\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n         * Add an event registration,\r\n         * Update data at the path,\r\n         * Raise any events,\r\n         * Cleanup the SyncTree\r\n         */\r\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\r\n        let events;\r\n        if (query._queryParams.loadsAllData()) {\r\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        }\r\n        else {\r\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\r\n        }\r\n        /*\r\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n         * ensure the corresponding child events will get fired.\r\n         */\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\r\n        return node;\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* TransactionStatus.RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* TransactionStatus.SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* TransactionStatus.RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    const callbackContext = new CallbackContext(() => { });\r\n    const container = new ValueEventRegistration(callbackContext);\r\n    return repoGetValue(query._repo, query, container).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \r\n    /*isUsingEmulator=*/ true);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    const db = _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n    if (!db._instanceStarted) {\r\n        const emulator = getDefaultEmulatorHostnameAndPort('database');\r\n        if (emulator) {\r\n            connectDatabaseEmulator(db, ...emulator);\r\n        }\r\n    }\r\n    return db;\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","export function isNumber(any: any): boolean {\r\n  return typeof any === \"number\" && Number.isFinite(any) && !Number.isNaN(any)\r\n}\r\n\r\nexport function abbreviateNumber(arg: string | number): string {\r\n  const number = Number(arg);\r\n  const SI_PREFIXES = [\r\n    { value: 1, symbol: '' },\r\n    { value: 1e3, symbol: 'K' },\r\n    { value: 1e6, symbol: 'M' },\r\n    { value: 1e9, symbol: 'G' },\r\n    { value: 1e12, symbol: 'T' },\r\n    { value: 1e15, symbol: 'P' },\r\n    { value: 1e18, symbol: 'E' },\r\n  ];\r\n  if (number === 0) return number.toString();\r\n\r\n  const tier = SI_PREFIXES.filter((n) => number >= n.value).pop() as { value: number, symbol: string };\r\n  const numberFixed = (number / tier.value).toFixed(tier.value === 1 ? 0 : 2);\r\n\r\n  return `${numberFixed}${tier.symbol}`;\r\n}","import { Database, DatabaseReference, get, increment, ref, set } from \"firebase/database\";\r\nimport { abbreviateNumber, isNumber } from \"./Utils\";\r\n\r\nexport class CounterElement {\r\n  element: HTMLElement;\r\n  database: Database;\r\n  ref: DatabaseReference;\r\n  config;\r\n  current = 0;\r\n\r\n  constructor(element: HTMLElement, database: Database, defaultAbbreviation: boolean) {\r\n    this.element = element;\r\n    this.database = database;\r\n    this.config = (() => {\r\n      const config = Object.assign({}, {\r\n        path: \"\",\r\n        increment: 0,\r\n        abbreviation: defaultAbbreviation\r\n      }, element.dataset);\r\n\r\n      const increment = Number(config.increment);\r\n      config.increment = isNumber(increment) ? increment : 0;\r\n\r\n      config.abbreviation = typeof config.abbreviation === \"boolean\" ? config.abbreviation : [\"true\", \"1\"].includes(config.abbreviation);\r\n\r\n      return config;\r\n    })();\r\n    this.ref = ref(this.database, this.config.path);\r\n  }\r\n\r\n  setDataView(number: number) {\r\n    const current = this.config.abbreviation ? abbreviateNumber(number) : number;\r\n    this.element.setAttribute(\"data-view\", current as never);\r\n  }\r\n\r\n  async getView() {\r\n    const snapshot = await get(this.ref);\r\n    const data = snapshot.exists() ? snapshot.val() : null;\r\n    const current: string = isNumber(data) ? data : 0;\r\n    this.current = current as never;\r\n    this.setDataView(this.current);\r\n    return this.current;\r\n  }\r\n\r\n  async increment(number?: number) {\r\n    const increase = isNumber(number) ? number as number : this.config.increment;\r\n    if (increase > 0) {\r\n      try {\r\n        await set(this.ref, increment(increase));\r\n        this.current += increase;\r\n      } catch(error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n    this.setDataView(this.current);\r\n    return this.current;\r\n  }\r\n}\r\n","import { FirebaseApp, initializeApp } from \"firebase/app\";\r\nimport { Database, getDatabase } from \"firebase/database\"\r\nimport { CounterElement } from \"./CounterElement\";\r\n\r\nlet current = 0;\r\n\r\nexport default class ViewCounter {\r\n  databaseUrl: string;\r\n  selector: string;\r\n  app: FirebaseApp;\r\n  database: Database;\r\n  elements: Array<CounterElement>;\r\n  abbreviation: boolean;\r\n\r\n  static counters: Array<ViewCounter> = []\r\n\r\n  constructor(options: Options) {\r\n    if (!options) throw new Error(\"Options is required\");\r\n    if (typeof options.databaseUrl !== \"string\") throw new Error(\"Specify 'databaseUrl' property in Options of type 'string'\");\r\n    if (typeof options.selector !== \"string\") throw new Error(\"Specify 'selector' property in Options of type 'string'\");\r\n\r\n    this.databaseUrl = options.databaseUrl;\r\n    this.selector = options.selector;\r\n    this.abbreviation = options.abbreviation === true;\r\n    this.app = initializeApp({\r\n      databaseURL: this.databaseUrl\r\n    }, `View_Counter_${current}`);\r\n    this.database = getDatabase(this.app);\r\n    this.elements = [];\r\n    this.init();\r\n\r\n    ViewCounter.counters.push(this);\r\n    current += 1;\r\n  }\r\n\r\n  init() {\r\n    const elements = Array.from(document.querySelectorAll<HTMLElement>(this.selector));\r\n    const _this = this;\r\n    elements.forEach((element) => {\r\n      // @ts-expect-error\r\n      if (typeof element.dataset.path === \"string\" && !element.viewCounter){\r\n        _this.addElement(element);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addElement(element: HTMLElement) {\r\n    if (!(element instanceof HTMLElement)){\r\n      throw new Error(\"Argument 1 must be of type 'HTMLElement'\");\r\n    }\r\n    // @ts-expect-error\r\n    if (element.viewCounter) {\r\n      throw new Error(\"Provided Element is already in use\");\r\n    }\r\n    if (typeof element.dataset.path !== \"string\") {\r\n      throw new Error(\"Attribute 'data-path' is required\");\r\n    }\r\n\r\n    const counterElement = new CounterElement(element, this.database, this.abbreviation);\r\n    \r\n    // @ts-expect-error\r\n    element.viewCounter = counterElement;\r\n    \r\n    await counterElement.getView();\r\n    await counterElement.increment();\r\n\r\n    this.elements.push(counterElement);\r\n\r\n    return counterElement;\r\n  }\r\n}\r\n","import ViewCounter from './modules/ViewCounter';\r\n\r\nexport default ViewCounter;"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","assertion","message","assertionError","Error","stringToByteArray$1","str","out","p","i","length","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","DecodeBase64StringError","constructor","super","arguments","name","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","console","error","deepCopy","value","deepExtend","undefined","target","source","Date","getTime","getDefaults","getGlobal","__FIREBASE_DEFAULTS__","process","env","defaultsJsonString","JSON","parse","getDefaultsFromEnvVariable","document","match","cookie","decoded","getDefaultsFromCookie","info","getDefaultAppConfig","_a","config","reject","resolve","promise","Promise","wrapCallback","callback","catch","isMobileCordova","test","navigator","FirebaseError","code","customData","setPrototypeOf","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","PATTERN","_","replaceTemplate","fullMessage","jsonEval","stringify","decode","token","header","claims","signature","parts","split","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","fnName","argName","stringLength","_delegate","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","optional","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","delete","async","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","warn","instanceOfAny","object","constructors","some","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","transformCachableValue","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","apply","unwrap","storeNames","tx","sort","done","unlisten","removeEventListener","complete","DOMException","addEventListener","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","Proxy","IDBRequest","request","success","result","then","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","index","shift","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","version","logString","name$o","version$1","logger","PLATFORM_LOG_STRING","_apps","_components","_addComponent","app","_registerComponent","componentName","ERROR_FACTORY","FirebaseAppImpl","_isDeleted","_options","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","initializeApp","rawConfig","existingApp","newApp","registerVersion","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","originalErrorMessage","writeHeartbeatsToIndexedDB","heartbeatObject","put","computeKey","idbGetError","appId","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","extractHeartbeatsForHeader","headerString","substring","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","isIndexedDBAvailable","preExist","DB_CHECK_NAME","onsuccess","close","deleteDatabase","onupgradeneeded","onerror","readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","high","stringToByteArray","sha1Bytes","buildLogMessage_","varArgs","arg","firstLog_","logger_","persistent","bind","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","s","ln","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","FORGE_DOMAIN_RE","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","newScript","onload","onreadystatechange","rstate","parentNode","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","CONSTANTS","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","handshakePayload","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","et","OnlineMonitor","online_","currentlyOnline","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","outstandingGet","_path","q","_queryObject","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","querystringParams","forEach","arrayVal","encodeURIComponent","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRecordContainsPath_","writeRecord","writeTreeDefaultFilter_","writeTreeLayerTree_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","visibleWrites","writeId","allWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","completeServerData","nodes","toIterate","writeTreeCalcIndexedSlice","writeTreeRefCalcIndexedSlice","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessor","changePath","writesCache","accumulator","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","viewProcessorApplyServerOverwrite","oldViewCache","changedSnap","completeCache","filterServerNode","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyUserOverwrite","viewProcessorCacheHasChild","viewProcessorApplyMerge","viewProcessorApplyServerMerge","changedChildren","viewMergeTree","curViewCache","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","operation","viewProcessorApplyUserMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","viewProcessorApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncPointHasCompleteView","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","lastWriteId","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeResetTree_","writeTreeRemoveWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removed","hadCompleteView","viewQueryId","_repo","syncPointRemoveEventRegistration","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointAddEventRegistration","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validatePathString","argumentName","validateRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventFn","getEventRunner","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","repoGenerateServerValues","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","clearEvents","repoCallOnCompleteCallback","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","validateWritablePath","validateFirebaseDataArg","callbackContext","ValueEventRegistration","cached","serverCacheNode","syncTreeGetServerValue","err","repoGetValue","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","isValidRootPathString","validateUrl","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_root","_rootInternal","repoInterrupt","repoManagerDeleteRepo","_checkNotDeleted","apiName","getDatabase","getApp","heartbeatController","triggerHeartbeat","_getProvider","emulator","productName","_b","emulatorHosts","getDefaultEmulatorHost","separatorIndex","lastIndexOf","getDefaultEmulatorHostnameAndPort","tokenProvider","mockUserToken","uid","project","iat","sub","user_id","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","alg","createMockUserToken","repoManagerApplyEmulatorSettings","connectDatabaseEmulator","isNumber","any","isFinite","_regeneratorRuntime","Op","hasOwn","desc","$Symbol","Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","Context","makeInvokeMethod","tryCatch","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","_invoke","AsyncIterator","PromiseImpl","invoke","_typeof","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","state","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","doneResult","displayName","isGeneratorFunction","genFun","ctor","mark","__proto__","awrap","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","_defineProperties","descriptor","_toPropertyKey","hint","prim","toPrimitive","_toPrimitive","simpleListen","echo","onEcho","registerDatabase","CounterElement","element","database","defaultAbbreviation","increment","Constructor","_classCallCheck","abbreviation","dataset","protoProps","_increment2","_getView","number","current","tier","symbol","numberFixed","toFixed","abbreviateNumber","setAttribute","_callee","_context","setDataView","_callee2","increase","_context2","t0","_x","ViewCounter","databaseUrl","selector","elements","init","counters","_addElement","querySelectorAll","_this","viewCounter","addElement","counterElement","HTMLElement","getView"],"sourceRoot":""}
